(*open Alcotest*)
(*open Unipoly*)
(*open Game*)
(*open Player*)
(*open Board*)
(*open Square*)
(*open Error*)

(*(* Module auxiliaire pour générer les données de test sans exposer les champs privés de game_state *)*)
(*module GameTestHelper = struct*)
(*  (* Création de joueurs de test *)*)
(*  let create_test_players () =*)
(*    [| Player.create_player "Player1"; Player.create_player "Player2" |]*)

(*  (* Création d'un plateau de test *)*)
(*  let create_test_board () =*)
(*    Board.init_board ()*)

(*  (* Création d'un état de jeu de test *)*)
(*  let create_test_game_state () =*)
(*    let players = create_test_players () in*)
(*    let board = create_test_board () in*)
(*    Game.create_game board players*)
(*end*)

(*(* Tests *)*)

(*(* Test de création d'un nouvel état de jeu *)*)
(*let test_create_game () =*)
(*  let players = GameTestHelper.create_test_players () in*)
(*  let board = GameTestHelper.create_test_board () in*)
(*  let game_state = Game.create_game board players in*)

(*  check int "Nombre de joueurs" 2 (Array.length players);*)
(*  check bool "Replay au début" false game_state.has_to_replay*)

(*(* Test du changement de joueur après la fin d'un tour *)*)
(*let test_end_turn_changes_player () =*)
(*  let game_state = GameTestHelper.create_test_game_state () in*)
(*  let initial_player = Game.get_current_player game_state in*)
(*  let new_game_state = Game.end_turn game_state in*)
(*  let new_player = Game.get_current_player new_game_state in*)
(*  check string "Changement de joueur après fin de tour"*)
(*    (Player.name_player new_player)*)
(*    (if Player.name_player initial_player = "Player1" then "Player2" else "Player1")*)

(*(* Test du lancer de dés *)*)
(*let test_roll_dices () =*)
(*  let (d1, d2) = Game.roll_dices () in*)
(*  check bool "Les dés sont entre 1 et 6" true (d1 >= 1 && d1 <= 6 && d2 >= 1 && d2 <= 6)*)

(*(* Test d'une action Move *)*)
(*let test_act_move () =*)
(*  let game_state = GameTestHelper.create_test_game_state () in*)
(*  let player = Game.get_current_player game_state in*)
(*  let new_game_state = match Game.act player (Move 5) game_state with*)
(*    | Next new_state -> new_state*)
(*    | _ -> game_state*)
(*  in*)
(*  let new_position = Player.pos_player (Game.get_current_player new_game_state) in*)
(*  check int "Position après déplacement" 5 new_position*)

(*(* Test de l'achat d'une propriété *)*)
(*let test_buy_property () =*)
(*  let game_state = GameTestHelper.create_test_game_state () in*)
(*  let player = Game.get_current_player game_state in*)
(*  let initial_money = Player.money_player player in*)
(*  let buyable_square = Square.create_restaurant "Crous" in*)
(*  let new_game_state = match Game.act player (Buy buyable_square) game_state with*)
(*    | Next new_state -> new_state*)
(*    | Error _ -> game_state*)
(*  in*)
(*  let updated_player = Game.get_current_player new_game_state in*)
(*  check bool "Achat effectif" true (Player.money_player updated_player < initial_money)*)

(*(* Test du paiement de la prison *)*)
(*let test_pay_jail () =*)
(*  let game_state = GameTestHelper.create_test_game_state () in*)
(*  let player = Game.get_current_player game_state in*)
(*  let jailed_player = Player.toogle_to_jail player true in*)
(*  Game.update_current_player game_state jailed_player;*)
(*  let initial_money = Player.money_player jailed_player in*)
(*  let new_game_state = match Game.act jailed_player PayJail game_state with*)
(*    | Next new_state -> new_state*)
(*    | Error _ -> game_state*)
(*  in*)
(*  let updated_player = Game.get_current_player new_game_state in*)
(*  check bool "Joueur est sorti de prison" false (Player.is_in_jail updated_player);*)
(*  check bool "Le paiement est effectif" true (Player.money_player updated_player < initial_money)*)

(*(* Groupes de tests pour game.ml *)*)
(*let () =*)
(*  run "Game tests" []*)
(*    "Creation", [test_case "Création de l'état de jeu" `Quick test_create_game];*)
(*    "End Turn", [test_case "Changement de joueur après fin de tour" `Quick test_end_turn_changes_player];*)
(*    "Roll Dices", [test_case "Lancer de dés" `Quick test_roll_dices];*)
(*    "Act Move", [test_case "Déplacement du joueur" `Quick test_act_move];*)
(*    "Buy Property", [test_case "Achat d'une propriété" `Quick test_buy_property];*)
(*    "Pay Jail", [test_case "Paiement pour sortir de prison" `Quick test_pay_jail];*)
(*  ]*)
